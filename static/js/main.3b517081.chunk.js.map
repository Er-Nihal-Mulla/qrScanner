{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","conatiner","marginTop","title","display","justifyContent","alignItems","color","padding","btn","marginBottom","App","useState","text","setText","imageUrl","setImageUrl","scanResultFile","setScanResultFile","scanResultWebCam","setScanResultWebCam","classes","qrRef","useRef","useEffect","setTimeout","window","location","reload","generateQrCode","a","QRCode","toDataURL","response","console","log","Container","className","Card","CardContent","Grid","container","spacing","item","xl","lg","md","sm","xs","TextField","label","onChange","e","target","value","Button","variant","onClick","href","download","src","alt","current","openImageDialog","ref","delay","style","width","onError","error","onScan","result","toast","success","legacyMode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3b517081.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Card,\r\n  CardContent,\r\n  makeStyles,\r\n  Grid,\r\n  TextField,\r\n  Button,\r\n} from \"@material-ui/core\";\r\n\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nimport QRCode from \"qrcode\";\r\nimport QrReader from \"react-qr-reader\";\r\n\r\nimport AddCircleIcon from \"@mui/icons-material/AddCircle\";\r\nimport DocumentScannerIcon from \"@mui/icons-material/DocumentScanner\";\r\n\r\nfunction App() {\r\n  const [text, setText] = useState(\"\");\r\n  const [imageUrl, setImageUrl] = useState(\"\");\r\n  const [scanResultFile, setScanResultFile] = useState(\"\");\r\n  const [scanResultWebCam, setScanResultWebCam] = useState(\"\");\r\n\r\n  const classes = useStyles();\r\n  const qrRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      window.location.reload();\r\n    }, 9000);\r\n  });\r\n\r\n  const generateQrCode = async () => {\r\n    try {\r\n      const response = await QRCode.toDataURL(text);\r\n      setImageUrl(response);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  const handleErrorFile = (error) => {\r\n    console.log(error);\r\n  };\r\n  const handleScanFile = (result) => {\r\n    if (result === \"nihal\") {\r\n      // window.alert(\"Success\");\r\n      toast.success(\"Match Success\");\r\n\r\n      setScanResultFile(result);\r\n    } else {\r\n      // window.alert(\"Error\");\r\n      toast.error(\"Match Error\");\r\n      setScanResultFile(result);\r\n    }\r\n  };\r\n  const onScanFile = () => {\r\n    qrRef.current.openImageDialog();\r\n  };\r\n  const handleErrorWebCam = (error) => {\r\n    console.log(error);\r\n  };\r\n  const handleScanWebCam = (result) => {\r\n    if (result === \"nihal\") {\r\n      // window.alert(\"Success\");\r\n      toast.success(\"Match Success\");\r\n      setScanResultWebCam(result);\r\n    } else {\r\n      // window.alert(\"Error\");\r\n      // toast.error(\"Match Error\");\r\n      setScanResultWebCam(result);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container className={classes.conatiner}>\r\n      <Card>\r\n        <h2 className={classes.title}>Verify QR info. </h2>\r\n        <CardContent>\r\n          <Grid container spacing={2}>\r\n            <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\r\n              <TextField\r\n                label=\"Enter Text Here\"\r\n                onChange={(e) => setText(e.target.value)}\r\n              />\r\n\r\n              <Button\r\n                className={classes.btn}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => generateQrCode()}\r\n              >\r\n                <AddCircleIcon />\r\n                Generate\r\n              </Button>\r\n              <br />\r\n              <br />\r\n              <br />\r\n              {imageUrl ? (\r\n                <a href={imageUrl} download>\r\n                  <img src={imageUrl} alt=\"img\" />\r\n                </a>\r\n              ) : null}\r\n            </Grid>\r\n            <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\r\n              <Button\r\n                className={classes.btn}\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={onScanFile}\r\n              >\r\n                <DocumentScannerIcon />\r\n                Scan Qr Code\r\n              </Button>\r\n              <ToastContainer />\r\n              <QrReader\r\n                ref={qrRef}\r\n                delay={300}\r\n                style={{ width: \"100%\" }}\r\n                onError={handleErrorFile}\r\n                onScan={handleScanFile}\r\n                legacyMode\r\n              />\r\n              <h3>Scanned info: {scanResultFile}</h3>\r\n            </Grid>\r\n            <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\r\n              <h3 style={{ color: \"#f50057\" }}>Qr Code Scan by Web Cam</h3>\r\n              <QrReader\r\n                delay={300}\r\n                style={{ width: \"100%\" }}\r\n                onError={handleErrorWebCam}\r\n                onScan={handleScanWebCam}\r\n              />\r\n              <h3>Scanned By WebCam info: {scanResultWebCam}</h3>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n      </Card>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  conatiner: {\r\n    marginTop: 10,\r\n  },\r\n  title: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    color: \"#3f51b5\",\r\n    padding: 20,\r\n  },\r\n  btn: {\r\n    marginTop: 10,\r\n    marginBottom: 20,\r\n  },\r\n}));\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}