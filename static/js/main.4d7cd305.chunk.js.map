{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","conatiner","marginTop","title","display","justifyContent","alignItems","background","color","padding","btn","marginBottom","App","useState","text","setText","imageUrl","setImageUrl","scanResultFile","setScanResultFile","scanResultWebCam","setScanResultWebCam","classes","qrRef","useRef","generateQrCode","a","QRCode","toDataURL","response","console","log","Container","className","Card","CardContent","Grid","container","spacing","item","xl","lg","md","sm","xs","TextField","label","onChange","e","target","value","Button","variant","onClick","href","download","src","alt","current","openImageDialog","ref","delay","style","width","onError","error","onScan","result","window","alert","legacyMode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d7cd305.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport {\r\n  Container,\r\n  Card,\r\n  CardContent,\r\n  makeStyles,\r\n  Grid,\r\n  TextField,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport QRCode from \"qrcode\";\r\nimport QrReader from \"react-qr-reader\";\r\n\r\nfunction App() {\r\n  const [text, setText] = useState(\"\");\r\n  const [imageUrl, setImageUrl] = useState(\"\");\r\n  const [scanResultFile, setScanResultFile] = useState(\"\");\r\n  const [scanResultWebCam, setScanResultWebCam] = useState(\"\");\r\n  const classes = useStyles();\r\n  const qrRef = useRef(null);\r\n\r\n  const generateQrCode = async () => {\r\n    try {\r\n      const response = await QRCode.toDataURL(text);\r\n      setImageUrl(response);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  const handleErrorFile = (error) => {\r\n    console.log(error);\r\n  };\r\n  const handleScanFile = (result) => {\r\n    if (result === \"nihal\") {\r\n      window.alert(\"Success\");\r\n      setScanResultFile(result);\r\n    } else {\r\n      window.alert(\"Error\");\r\n    }\r\n  };\r\n  const onScanFile = () => {\r\n    qrRef.current.openImageDialog();\r\n  };\r\n  const handleErrorWebCam = (error) => {\r\n    console.log(error);\r\n  };\r\n  const handleScanWebCam = (result) => {\r\n    if (result) {\r\n      setScanResultWebCam(result);\r\n    }\r\n  };\r\n  return (\r\n    <Container className={classes.conatiner}>\r\n      <Card>\r\n        <h2 className={classes.title}>\r\n          Generate Download & Scan QR Code with React js\r\n        </h2>\r\n        <CardContent>\r\n          <Grid container spacing={2}>\r\n            <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\r\n              <TextField\r\n                label=\"Enter Text Here\"\r\n                onChange={(e) => setText(e.target.value)}\r\n              />\r\n              <Button\r\n                className={classes.btn}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => generateQrCode()}\r\n              >\r\n                Generate\r\n              </Button>\r\n              <br />\r\n              <br />\r\n              <br />\r\n              {imageUrl ? (\r\n                <a href={imageUrl} download>\r\n                  <img src={imageUrl} alt=\"img\" />\r\n                </a>\r\n              ) : null}\r\n            </Grid>\r\n            <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\r\n              <Button\r\n                className={classes.btn}\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={onScanFile}\r\n              >\r\n                Scan Qr Code\r\n              </Button>\r\n              <QrReader\r\n                ref={qrRef}\r\n                delay={300}\r\n                style={{ width: \"100%\" }}\r\n                onError={handleErrorFile}\r\n                onScan={handleScanFile}\r\n                legacyMode\r\n              />\r\n              <h3>Scanned Code: {scanResultFile}</h3>\r\n            </Grid>\r\n            <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\r\n              <h3>Qr Code Scan by Web Cam</h3>\r\n              <QrReader\r\n                delay={300}\r\n                style={{ width: \"100%\" }}\r\n                onError={handleErrorWebCam}\r\n                onScan={handleScanWebCam}\r\n              />\r\n              <h3>Scanned By WebCam Code: {scanResultWebCam}</h3>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n      </Card>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  conatiner: {\r\n    marginTop: 10,\r\n  },\r\n  title: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    background: \"#3f51b5\",\r\n    color: \"#fff\",\r\n    padding: 20,\r\n  },\r\n  btn: {\r\n    marginTop: 10,\r\n    marginBottom: 20,\r\n  },\r\n}));\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}